/*!
  backstage.js v0.0.3
  https://github.com/sushat4692/backstage.js#readme
  Released under the MIT License.
*/
import { eventmit } from 'eventmit';

var useLoaderEmitter = function () {
    var progress = eventmit();
    var error = eventmit();
    var complete = eventmit();
    var fileProgress = eventmit();
    var fileComplete = eventmit();
    var on = function (_a) {
        var type = _a.type, emitter = _a.emitter;
        switch (type) {
            case "progress":
                progress.on(emitter);
                break;
            case "error":
                error.on(emitter);
                break;
            case "complete":
                complete.on(emitter);
                break;
            case "file_progress":
                fileProgress.on(emitter);
                break;
            case "file_complete":
                fileComplete.on(emitter);
                break;
        }
    };
    var off = function (_a) {
        var type = _a.type, emitter = _a.emitter;
        switch (type) {
            case "progress":
                progress.off(emitter);
                break;
            case "error":
                error.off(emitter);
                break;
            case "complete":
                complete.off(emitter);
                break;
            case "file_progress":
                fileProgress.off(emitter);
                break;
            case "file_complete":
                fileComplete.off(emitter);
                break;
        }
    };
    var offAll = function (key) {
        switch (key) {
            case "progress":
                progress.offAll();
                break;
            case "error":
                error.offAll();
                break;
            case "complete":
                complete.offAll();
                break;
            case "file_progress":
                fileProgress.offAll();
                break;
            case "file_complete":
                fileComplete.offAll();
                break;
        }
    };
    return {
        progress: progress,
        error: error,
        complete: complete,
        fileProgress: fileProgress,
        fileComplete: fileComplete,
        on: on,
        off: off,
        offAll: offAll,
    };
};

var FileLoader = function (file) {
    var total = 0;
    var current = 0;
    var xhr = null;
    // Event Emitter
    var _a = useLoaderEmitter(), progress = _a.progress, error = _a.error, complete = _a.complete, on = _a.on, off = _a.off, offAll = _a.offAll;
    var start = function () {
        xhr = new XMLHttpRequest();
        xhr.open("get", file, true);
        xhr.responseType = "blob";
        xhr.onloadstart = function (e) {
            current = e.loaded;
            if (e.lengthComputable) {
                total = e.total;
            }
            progress.emit({ total: total, current: current, per: current / total });
        };
        xhr.onprogress = function (e) {
            current = e.loaded;
            if (e.lengthComputable) {
                total = e.total;
            }
            progress.emit({ total: total, current: current, per: current / total });
        };
        xhr.onload = function (e) {
            complete.emit({ total: total, file: { file: file, size: total } });
            abort();
        };
        xhr.onerror = function (e) {
            error.emit(new Error("Failed to load ".concat(file)));
            abort();
        };
        xhr.send();
    };
    var abort = function () {
        if (!xhr) {
            return;
        }
        xhr.abort();
        xhr = null;
    };
    return {
        on: on,
        off: off,
        offAll: offAll,
        start: start,
        abort: abort,
    };
};

var ParallelLoader = function (files) {
    var fileLength = files.length;
    var loadedFileLength = 0;
    // Event Emitter
    var _a = useLoaderEmitter(), progress = _a.progress, error = _a.error, complete = _a.complete, fileComplete = _a.fileComplete, on = _a.on, off = _a.off, offAll = _a.offAll;
    var loaders = [];
    var fileResults = [];
    files.forEach(function (file) {
        var loader = FileLoader(file);
        loader.on({
            type: "progress",
            emitter: function (_) {
                progress.emit({
                    total: fileLength,
                    current: loadedFileLength,
                    per: loadedFileLength / fileLength,
                });
            },
        });
        loader.on({
            type: "complete",
            emitter: function (e) {
                loadedFileLength += 1;
                fileResults.push(e.file);
                fileComplete.emit({
                    total: fileLength,
                    file: e.file,
                });
                if (loadedFileLength >= fileLength) {
                    complete.emit({
                        total: fileLength,
                        files: fileResults,
                    });
                }
            },
        });
        loader.on({
            type: "error",
            emitter: function (e) { return error.emit(e); },
        });
        loaders.push(loader);
    });
    return {
        on: on,
        off: off,
        offAll: offAll,
        start: function () {
            loaders.forEach(function (loader) { return loader.start(); });
        },
    };
};

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return _assign.apply(this, arguments);
};

var SerialLoader = function (files) {
    var fileLength = files.length;
    var loadedFileLength = 0;
    var currentIndex = 0;
    // Event Emitter
    var _a = useLoaderEmitter(), progress = _a.progress, error = _a.error, complete = _a.complete, fileProgress = _a.fileProgress, fileComplete = _a.fileComplete, on = _a.on, off = _a.off, offAll = _a.offAll;
    var loaders = [];
    var fileResults = [];
    files.forEach(function (file) {
        var loader = FileLoader(file);
        loader.on({
            type: "progress",
            emitter: function (e) {
                fileProgress.emit(_assign(_assign({}, e), { file: file }));
                progress.emit({
                    total: fileLength,
                    current: loadedFileLength,
                    per: loadedFileLength / fileLength,
                });
            },
        });
        loader.on({
            type: "complete",
            emitter: function (e) {
                loadedFileLength += 1;
                fileResults.push(e.file);
                fileComplete.emit({
                    total: fileLength,
                    file: e.file,
                });
                if (loadedFileLength >= fileLength) {
                    complete.emit({
                        total: fileLength,
                        files: fileResults,
                    });
                }
                else {
                    currentIndex += 1;
                    loaders[currentIndex].start();
                }
            },
        });
        loader.on({
            type: "error",
            emitter: function (e) { return error.emit(e); },
        });
        loaders.push(loader);
    });
    return {
        on: on,
        off: off,
        offAll: offAll,
        start: function () {
            loaders[currentIndex].start();
        },
    };
};

var Loader = function (type, files) {
    switch (type) {
        case "parallel":
            return ParallelLoader(files);
        case "serial":
            return SerialLoader(files);
        default:
            var _exhaustiveCheck = type;
            return _exhaustiveCheck;
    }
};

var Backstage = function (type, files) {
    var loader = Loader(type, files);
    return loader;
};

export { Backstage };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
