/*!
  backstage.js v0.0.1
  https://github.com/sushat4692/backstage.js#readme
  Released under the MIT License.
*/
import { eventmit } from 'eventmit';

var prepareEvent = function () {
    var progress = eventmit();
    var error = eventmit();
    var complete = eventmit();
    var on = function (event) {
        switch (event.key) {
            case "progress":
                progress.on(event.handler);
                break;
            case "error":
                error.on(event.handler);
                break;
            case "complete":
                complete.on(event.handler);
                break;
        }
    };
    var off = function (event) {
        switch (event.key) {
            case "progress":
                progress.off(event.handler);
                break;
            case "error":
                error.off(event.handler);
                break;
            case "complete":
                complete.off(event.handler);
                break;
        }
    };
    var offAll = function (key) {
        switch (key) {
            case "progress":
                progress.offAll();
                break;
            case "error":
                error.offAll();
                break;
            case "complete":
                complete.offAll();
                break;
        }
    };
    var emit = function (emit) {
        switch (emit.key) {
            case "progress":
                return progress.emit(emit.value);
            case "error":
                return error.emit(emit.value);
            case "complete":
                return complete.emit(emit.value);
        }
    };
    return {
        on: on,
        off: off,
        offAll: offAll,
        emit: emit,
    };
};

var SingleLoader = function (file, emit, complete, error) {
    var _total = 0;
    var _current = 0;
    var _ready = false;
    return {
        start: function () {
            var xhr = new XMLHttpRequest();
            xhr.open("get", file, true);
            xhr.responseType = "blob";
            xhr.onprogress = function (e) {
                if (!e.lengthComputable) {
                    return;
                }
                _ready = true;
                _total = e.total;
                _current = e.loaded;
                emit();
            };
            xhr.onload = function (e) {
                complete();
            };
            xhr.onerror = function (e) {
                error();
            };
            xhr.send();
        },
        total: function () {
            return _total;
        },
        current: function () {
            return _current;
        },
        ready: function () {
            return _ready;
        },
    };
};
var Loader = function (files, emit) {
    var fileLength = files.length;
    var loaders = [];
    files.forEach(function (file) {
        var loader = SingleLoader(file, function () {
            var result = loaders.reduce(function (acc, cur) {
                acc.total += cur.total();
                acc.current += cur.current();
                acc.ready = acc.ready && cur.ready();
                return acc;
            }, { total: 0, current: 0, per: 0, ready: true });
            if (result.ready) {
                result.per = result.current / result.total;
                emit({ key: "progress", value: result });
            }
        }, function () {
            fileLength -= 1;
            if (fileLength <= 0) {
                emit({ key: "complete", value: {} });
            }
        }, function () {
            emit({ key: "error", value: new Error("error") });
        });
        loaders.push(loader);
    });
    return {
        start: function () {
            loaders.forEach(function (loader) {
                loader.start();
            });
        },
    };
};

var Backstage = function (files) {
    var _a = prepareEvent(), on = _a.on, off = _a.off, offAll = _a.offAll, emit = _a.emit;
    var loader = Loader(files, emit);
    return {
        on: on,
        off: off,
        offAll: offAll,
        start: loader.start,
    };
};

export { Backstage };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
