/*!
  backstage.js v0.0.1
  https://github.com/sushat4692/backstage.js#readme
  Released under the MIT License.
*/
'use strict';

var eventmit = require('eventmit');

var prepareEvent = function () {
    var progress = eventmit.eventmit();
    var error = eventmit.eventmit();
    var file_complete = eventmit.eventmit();
    var complete = eventmit.eventmit();
    var on = function (key, emitter) {
        switch (key) {
            case "progress":
                progress.on(emitter);
                break;
            case "error":
                error.on(emitter);
                break;
            case "file_complete":
                file_complete.on(emitter);
                break;
            case "complete":
                complete.on(emitter);
                break;
        }
    };
    var off = function (key, emitter) {
        switch (key) {
            case "progress":
                progress.off(emitter);
                break;
            case "error":
                error.off(emitter);
                break;
            case "file_complete":
                file_complete.off(emitter);
                break;
            case "complete":
                complete.off(emitter);
                break;
        }
    };
    var offAll = function (key) {
        switch (key) {
            case "progress":
                progress.offAll();
                break;
            case "error":
                error.offAll();
                break;
            case "file_complete":
                file_complete.offAll();
                break;
            case "complete":
                complete.offAll();
                break;
        }
    };
    var emit = function (key, value) {
        switch (key) {
            case "progress":
                return progress.emit(value);
            case "error":
                return error.emit(value);
            case "file_complete":
                return file_complete.emit(value);
            case "complete":
                return complete.emit(value);
        }
    };
    return {
        on: on,
        off: off,
        offAll: offAll,
        emit: emit,
    };
};

var SingleLoader = function (file, progress, complete, error) {
    var _total = 0;
    var _current = 0;
    var _ready = false;
    return {
        start: function () {
            var xhr = new XMLHttpRequest();
            xhr.open("get", file, true);
            xhr.responseType = "blob";
            xhr.onprogress = function (e) {
                if (!e.lengthComputable) {
                    return;
                }
                _ready = true;
                _total = e.total;
                _current = e.loaded;
                progress();
            };
            xhr.onload = function (e) {
                complete(file, _total);
            };
            xhr.onerror = function (e) {
                error();
            };
            xhr.send();
        },
        total: function () {
            return _total;
        },
        current: function () {
            return _current;
        },
        ready: function () {
            return _ready;
        },
    };
};
var Loader = function (files, emit) {
    var fileLength = files.length;
    var loaders = [];
    var fileResults = files.map(function (file) { return ({ file: file, size: 0 }); });
    files.forEach(function (file) {
        var loader = SingleLoader(file, function () {
            var ready = true;
            var result = loaders.reduce(function (acc, cur) {
                acc.total += cur.total();
                acc.current += cur.current();
                ready = ready && cur.ready();
                return acc;
            }, { total: 0, current: 0, per: 0 });
            if (ready) {
                result.per = result.current / result.total;
                emit("progress", result);
            }
        }, function (file, size) {
            emit("file_complete", { file: file, size: size });
            var total = 0;
            fileResults = fileResults.map(function (res) {
                var _size = file === res.file ? size : res.size;
                total += _size;
                return {
                    file: res.file,
                    size: _size,
                };
            });
            fileLength -= 1;
            if (fileLength <= 0) {
                emit("complete", { total: total, files: fileResults });
            }
        }, function () {
            emit("error", new Error("error"));
        });
        loaders.push(loader);
    });
    return {
        start: function () {
            loaders.forEach(function (loader) {
                loader.start();
            });
        },
    };
};

var Backstage = function (files) {
    var _a = prepareEvent(), on = _a.on, off = _a.off, offAll = _a.offAll, emit = _a.emit;
    var loader = Loader(files, emit);
    return {
        on: on,
        off: off,
        offAll: offAll,
        start: loader.start,
    };
};

exports.Backstage = Backstage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
